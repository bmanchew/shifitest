2. Get the access_token
To retrieve the client access_token, call the /auth/v2/token/ endpoint with the base64 encoded ${clientID}:${clientSecret} and the client_credentials grant.
Base URL: https://apx.didit.me
Endpoint: /auth/v2/token/
Purpose: Authenticate the service provider and obtain a token.
Process: The service provider sends a POST request with their Client ID and Client Secret. The server responds with a client access_token if the credentials are valid.
⚠️
Keep your Client ID and Client Secret secure. Never share the Client Secret credentials or expose them in client-side code.
Request
To retrieve the encodedCredentials, follow these steps:
Combine Credentials: Concatenate your Client ID and Client Secret with a colon (:) in between.
Base64 Encode: Encode the combined string using Base64. This encoded string will be used as encodedCredentials.
Include the encodedCredentials in the Authorization header of your request and use the grant type client_credentials as shown below:


POST /auth/v2/token/ HTTP/1.1Host: apx.didit.meContent-Type: application/x-www-form-urlencodedAuthorization: Basic ${encodedCredentials} grant_type=client_credentials
Response


{  "iss": "https://didit.me",  "iat": 1617220000,  "sub": "your-application-uuid",  "client_id": "your-client-id",  "organization_id": "your-organization-id",  "expires_in": 86400,  "exp": 1618084000,  "access_token": "your-cient-access-token"}
Code Example


const fetchClientToken = async () => {  const url = process.env.NEXT_PUBLIC_API_URL + '/auth/v2/token/';  const clientID = process.env.NEXT_PUBLIC_DIDIT_CLIENT_ID;  const clientSecret = process.env.CLIENT_SECRET;  const encodedCredentials = Buffer.from(    `${clientID}:${clientSecret}`,  ).toString('base64');  const params = new URLSearchParams();  params.append('grant_type', 'client_credentials');  try {    const response = await fetch(url, {      method: 'POST',      headers: {        Authorization: `Basic ${encodedCredentials}`,        'Content-Type': 'application/x-www-form-urlencoded',      },      body: params,    });    const data = await response.json();    if (response.ok) {      // Return the entire data object if you need to use other properties      return data;    } else {      console.error('Error fetching client token:', data.message);      return null;    }  } catch (error) {    console.error('Network error:', error);    return null;  }};



Creating a Verification Session
After obtaining a valid client access token, you can call the /v1/session/ endpoint to create a new verification session.
Base URL: https://verification.didit.me
Endpoint: /v1/session/
Method: POST
Authentication: Client Token (Bearer Token)
⚠️
The Authentication endpoint has a different Base URL than the verification session endpoints. Ensure you are using the correct URLs for each endpoint to avoid connectivity issues.
Request
To create a session programmatically, follow these steps:
Authenticate
To obtain the access_token, refer to the Authentication documentation page.
ℹ️
The access_token is valid for a limited time (x minutes), so you do not need to authenticate for every request until the token expires.
Select Desired Parameters
callback: A URL for redirection post-verification.
Example: "https://example.com/verification/callback"
features (optional): Verification features to be used. Choose from the following options:
OCR
OCR + NFC
OCR + AML
OCR + NFC + AML
OCR + FACE
OCR + NFC + FACE
OCR + FACE + AML
OCR + NFC + FACE + AML
If not specified, the system will use the features defined in the verification settings on the console. For more information, see Verification Settings.
vendor_data: Unique identifier or data for the vendor, typically the uuid of the user trying to verify.
Create Session Request


POST /v1/session/ HTTP/1.1Host: verification.didit.meContent-Type: application/jsonAuthorization: Bearer {access_token} {  "callback": "https://example.com/verification/callback",  "features": "OCR + NFC + FACE",  // Optional: If omitted, uses settings from console  "vendor_data": "your-vendor-data"}
Response
Returns session details including session_id, session_number, session_token, vendor_data, status, callback, url, and features. The session_id should be linked to your user in your User model, and you should open or send the url for your user to start the verification process.
Example Response


{  "session_id": "your-session-id",  "session_number": 1,  "session_token": "your-session-token",  "vendor_data": "your-vendor-data",  "status": "Not Started",  "callback": "https://example.com/verification/callback",  "url": "https://verify.didit.me/session/{session_token}",  "features": "OCR + NFC + FACE"}
Code Example:
javascriptpython



const createSession = async (  features: string,  callback: string,  vendor_data: string,) => {  const url = `${BASE_URL}/v1/session/`;  const token = await getClientToken();  if (!token) {    console.error('Error fetching client token');  } else {    const body = {      vendor_data: vendor_data,      callback: callback,      features: features,    };    const requestOptions = {      method: 'POST',      headers: {        'Content-Type': 'application/json',        Authorization: `Bearer ${token.access_token}`,      },      body: JSON.stringify(body),    };    try {      const response = await fetch(url, requestOptions);      const data = await response.json();      if (response.status === 201 && data) {        return data;      } else {        console.error('Error creating session:', data.message);        throw new Error(data.message);      }    } catch (error) {      console.error('Network error:', error);      throw error;    }  }};



Retrieving a Verification Result
To retrieve the results of a verification session, you can call the /v1/session/{sessionId}/decision/ endpoint.
Base URL: https://verification.didit.me
Endpoint: /v1/session/{sessionId}/decision/
Method: GET
Authentication: Client Token (Bearer Token)
⚠️
The Authentication endpoint has a different Base URL than the verification session endpoints. Ensure you are using the correct URLs for each endpoint to avoid connectivity issues.
Request
To retrieve a verification result programmatically, follow these steps:
Authenticate
To obtain the access_token, refer to the Authentication documentation page.
ℹ️
The access_token is valid for a limited time (x minutes), so you do not need to authenticate for every request until the token expires.
Select Desired Parameters
session_id: Unique identifier for the session.
Retrieve Verification Result
Use the following request format to retrieve the verification result:


GET /v1/session/{session_id}/decision/ HTTP/1.1Host: verification.didit.meContent-Type: application/jsonAuthorization: Bearer {access_token}
Response
Returns detailed information about the verification session, including KYC, AML, facial recognition results, address verification, warnings, and reviews.
Example Response


{  "session_id": "11111111-2222-3333-4444-555555555555",  "session_number": 43762,  "session_url": "https://verify.didit.me/session/11111111-2222-3333-4444-555555555555",  "status": "Declined",  "vendor_data": "11111111-1111-1111-1111-111111111111",  "callback": "https://verify.didit.me/",  "features": "OCR + FACE",  "kyc": {    "status": "Approved",    "ocr_status": "Approved",    "epassport_status": "Approved",    "document_type": "Passport",    "document_number": "BK123456",    "personal_number": "999999999",    "portrait_image": "https://example.com/portrait.jpg",    "front_image": "https://example.com/front.jpg",    "front_video": "https://example.com/front.mp4",    "back_image": null,    "back_video": null,    "full_front_image": "https://example.com/full_front.jpg",    "full_back_image": null,    "date_of_birth": "1990-01-01",    "expiration_date": "2026-03-24",    "date_of_issue": "2019-03-24",    "issuing_state": "ESP",    "issuing_state_name": "Spain",    "first_name": "Sergey",    "last_name": "Kozlov",    "full_name": "Sergey Kozlov",    "gender": "M",    "address": "C Clot 36 P02,Barcelona,Barcelona Esp",    "formatted_address": "Carrer del Clot, 36, p02, Sant Martí, 08018 Barcelona, Spain",    "is_nfc_verified": false,    "parsed_address": null,    "place_of_birth": "Madrid, Spain",    "marital_status": "SINGLE",    "nationality": "ESP",    "created_at": "2024-07-28T06:46:39.354573Z"  },  "aml": {    "status": "In Review",    "total_hits": 1,    "score": 70.35, // score of the highest hit from 0 to 100    "hits": [      {        "id": "aaaaaaa-1111-2222-3333-4444-555555555555",        "match": false,        "score": 0.7034920634920635, // score of the hit from 0 to 1        "target": true,        "caption": "Kozlov Sergey Alexandrovich",        "datasets": ["ru_acf_bribetakers"],        "features": {          "person_name_jaro_winkler": 0.8793650793650793,          "person_name_phonetic_match": 0.5        },        "last_seen": "2024-07-20T17:53:03",        "first_seen": "2023-06-23T12:02:51",        "properties": {          "name": ["Kozlov Sergey Alexandrovich"],          "alias": ["Козлов Сергей Александрович"],          "notes": [            "Assistant Prosecutor of the Soviet District of Voronezh. Involved in the case against the Ukrainian pilot Nadiya Savchenko"          ],          "gender": ["male"],          "topics": ["poi"],          "position": [            "Organizers of political repressions",            "Организаторы политических репрессий"          ]        },        "last_change": "2024-02-27T17:53:01"      }    ]  },  "face": {    "status": "Approved",    "face_match_status": "Approved",    "liveness_status": "Approved",    "face_match_similarity": 97.99,    "liveness_confidence": 87.99,    "source_image": "https://example.com/source.jpg",    "target_image": "https://example.com/target.jpg",    "video_url": "https://example.com/video.mp4",    "age_estimation": 24.3,    "gender_estimation": {      "male": 99.23,      "female": 0.77    }  },  "location": {      "device_brand": "Apple",      "device_model": "iPhone",      "browser_family": "Mobile Safari",      "os_family": "iOS",      "platform": "mobile",      "ip_country": "Spain",      "ip_country_code": "ES",      "ip_state": "Barcelona",      "ip_city": "Barcelona",      "latitude": 41.4022,      "longitude": 2.1407,      "ip_address": "83.50.226.71",      "isp": null,      "organization": null,      "is_vpn_or_tor": false,      "is_data_center": false,      "time_zone": "Europe/Madrid",      "time_zone_offset": "+0100",      "status": "Approved",      "document_location": {        "latitude": 4,        "longitude": -72      },      "ip_location": {        "longitude": 2.1407,        "latitude": 41.4022      },      "distance_from_document_to_ip_km": {        "distance": 8393.68,        "direction": "NE"      }  },  "warnings": [    {      "feature": "AML",      "risk": "POSSIBLE_MATCH_FOUND",      "additional_data": null,      "log_type": "warning",      "short_description": "Possible match found in AML screening",      "long_description": "The Anti-Money Laundering (AML) screening process identified potential matches with watchlists or high-risk databases, requiring further review."    }  ],  "reviews": [    {      "user": "compliance@example.com",      "new_status": "Declined",      "comment": "Possible match found in AML screening",      "created_at": "2024-07-18T13:29:00.366811Z"    }  ],  "extra_images": [],  "created_at": "2024-07-24T08:54:25.443172Z"}
Code Example


const getSessionDecision = async (sessionId) => {  const endpoint = `${BASE_URL}/v1/session/${sessionId}/decision/`;  const token = await getClientToken();  if (!token) {    console.error('Error fetching client token');  } else {    const headers = {      'Content-Type': 'application/json',      Authorization: `Bearer ${token.access_token}`,    };    try {      const response = await fetch(endpoint, {        method: 'GET',        headers,      });      const data = await response.json();      if (response.ok) {        return data;      } else {        console.error('Error fetching session decision:', data.message);        throw new Error(data.message);      }    } catch (err) {      console.error('Network error:', err);      throw err;    }  }};


Generating a Verification PDF Report
To generate a PDF report containing the verification session results, you can call the /v1/session/{sessionId}/generate-pdf/ endpoint.
Base URL: https://verification.didit.me
Endpoint: /v1/session/{sessionId}/generate-pdf/
Method: GET
Authentication: Client Token (Bearer Token)
⚠️
The Authentication endpoint has a different Base URL than the verification session endpoints. Ensure you are using the correct URLs for each endpoint to avoid connectivity issues.
Request
To generate a verification PDF report programmatically, follow these steps:
Authenticate
To obtain the access_token, refer to the Authentication documentation page.
ℹ️
The access_token is valid for a limited time (x minutes), so you do not need to authenticate for every request until the token expires.
Select Desired Parameters
session_id: Unique identifier for the session.
Generate PDF Report
Use the following request format to generate the PDF report:


GET /v1/session/{session_id}/generate-pdf/ HTTP/1.1Host: verification.didit.meContent-Type: application/jsonAuthorization: Bearer {access_token}
Response
Returns a PDF file containing detailed information about the verification session. The response includes appropriate headers for file download.
Content-Type: application/pdf
Content-Disposition: attachment; filename=session_{session_id}.pdf
Code Example


const generateSessionPDF = async (sessionId) => {  const endpoint = `${BASE_URL}/v1/session/${sessionId}/generate-pdf/`;  const token = await getClientToken();  if (!token) {    console.error('Error fetching client token');  } else {    const headers = {      Authorization: `Bearer ${token.access_token}`,    };    try {      const response = await fetch(endpoint, {        method: 'GET',        headers,      });      if (response.ok) {        // Convert the response to a blob        const blob = await response.blob();        // Create a download link        const url = window.URL.createObjectURL(blob);        const a = document.createElement('a');        a.href = url;        a.download = `session_${sessionId}.pdf`; // or use the filename from Content-Disposition        document.body.appendChild(a);        a.click();        // Cleanup        window.URL.revokeObjectURL(url);        document.body.removeChild(a);        return true;      } else {        const errorData = await response.json();        console.error('Error generating PDF:', errorData.message);        throw new Error(errorData.message);      }    } catch (err) {      console.error('Network error:', err);      throw err;    }  }};
The code example above shows how to handle the PDF file in a browser environment. For server-side implementations, you'll need to adjust the file handling logic according to your backend framework.
Server-side Example (Node.js)


const fs = require('fs'); const generateSessionPDF = async (sessionId) => {  const endpoint = `${BASE_URL}/v1/session/${sessionId}/generate-pdf/`;  const token = await getClientToken();  if (!token) {    console.error('Error fetching client token');  } else {    const headers = {      Authorization: `Bearer ${token.access_token}`,    };    try {      const response = await fetch(endpoint, {        method: 'GET',        headers,      });      if (response.ok) {        // Get the array buffer of the PDF        const arrayBuffer = await response.arrayBuffer();        // Save the PDF to a file        const fileName = `session_${sessionId}.pdf`;        fs.writeFileSync(fileName, Buffer.from(arrayBuffer));        return fileName;      } else {        const errorData = await response.json();        console.error('Error generating PDF:', errorData.message);        throw new Error(errorData.message);      }    } catch (err) {      console.error('Network error:', err);      throw err;    }  }};



Updating a Verification Session Status
After obtaining a valid client access token, you can call the /v1/session/{session_id}/status/ endpoint to update the status of a verification session.
Base URL: https://verification.didit.me
Endpoint: /v1/session/{sessionId}/update-status/
Method: PATCH
Authentication: Client Token (Bearer Token)
⚠️
The Authentication endpoint has a different Base URL than the verification session endpoints. Ensure you are using the correct URLs for each endpoint to avoid connectivity issues.
Request
To update the status of a verification session programmatically, follow these steps:
Authenticate
To obtain the access_token, refer to the Authentication documentation page.
ℹ️
The access_token is valid for a limited time (x minutes), so you do not need to authenticate for every request until the token expires.
Select Desired Parameters
new_status: It can be Approved, or Declined.
comment (optional): A comment to be added to the review.
Update Session Status Request


PATCH /v1/session/{session_id}/update-status/ HTTP/1.1Host: verification.didit.meContent-Type: application/jsonAuthorization: Bearer {access_token} {  "new_status": "Declined",  "comment": "Duplicated user"}
Response
Returns session details including session_id, session_token, url. The session_id should be linked to your user in your User model, and you should open or send the url for your user to start the verification process.
Example Response


{  "session_id": "your-session-id",}
Code Example:


const updateSessionStatus = async (  sessionId: string,  new_status: string,  comment: string,) => {  const url = `${BASE_URL}/v1/session/${sessionId}/update-status/`;  const token = await getClientToken();  if (!token) {    console.error('Error fetching client token');  } else {    const body = {      new_status: new_status,      comment: comment,    };    const requestOptions = {      method: 'PATCH',      headers: {        'Content-Type': 'application/json',        Authorization: `Bearer ${token.access_token}`,      },      body: JSON.stringify(body),    };    try {      const response = await fetch(url, requestOptions);      const data = await response.json();      if (response.status === 200 && data) {        return data;      } else {        console.error('Error updating session status:', data.message);        throw new Error(data.message);      }    } catch (error) {      console.error('Network error:', error);      throw error;    }  }};

