Perfect. I’ll create a detailed Product Requirements Document (PRD) for your investor portal that your Replit AI developer can use to build the system.
It will cover investor onboarding, document handling, investment selection, Plaid integration, and fund flow logic tied to ShiFi’s tokenized contract model. I’ll include user flows, technical requirements, and implementation notes.
I’ll return shortly with the full breakdown.

# ShiFi Investor Portal – Product Requirements Document

## Introduction and Overview  
The **ShiFi Investor Portal** is a secure web application that enables accredited investors to participate in ShiFi’s investment offerings seamlessly. Through this portal, investors can register an account, verify their identity (KYC), sign a Non-Disclosure Agreement (NDA), review confidential investment documents, choose a fixed-return investment product, electronically sign legal agreements, and fund their investment via bank transfer. All investor interactions – from onboarding to funding and post-investment tracking – are handled within this portal. The system will transfer the invested funds into ShiFi’s pooled fund account, which ShiFi then uses to purchase tokenized contracts (the token management happens off-portal). This PRD outlines the features, requirements, and user flows for the Investor Portal, providing a clear specification for developers. 

## Goals and Objectives  
- **Streamlined Investor Onboarding:** Provide a frictionless sign-up process for accredited investors, including identity verification (KYC) and NDA signing, to ensure compliance before accessing sensitive materials.  
- **Secure Document Access:** Allow verified investors to securely view and download key investment documents (e.g. financials, PPM) in a protected data room.  
- **Simplified Investment Process:** Enable investors to select from fixed investment offerings, auto-generate the necessary promissory note contracts, and sign them electronically within the portal.  
- **Integrated Funding Workflow:** Integrate bank transfer capabilities (via Plaid) so investors can easily link their bank account and fund their investments. Ensure the portal updates investment status based on funding progress.  
- **Transparent Post-Investment Tracking:** Offer an investor dashboard showing their investment details, statuses of transfers, signed agreements, and payment history (including any pending or upcoming payments).  
- **Security and Compliance:** Use robust authentication, secure data storage, and third-party integrations (KYC, e-signature, ACH transfer) to protect sensitive information and comply with financial regulations (AML/KYC, accreditation).  

## Scope of Work  
**In Scope:**  
- Investor-facing web portal (no separate admin UI) covering registration, login, identity verification, document access, investment selection, e-signature, funding via ACH, and a post-investment dashboard.  
- Integration with third-party services: Didit for KYC/NDA, Thanks Roger for e-signature and document generation, Plaid for bank account linking and ACH transfers (with Dwolla as a backup for transfers), and an email service for notifications.  
- Storage of investment documents and signed agreements in a secure manner (e.g. encrypted cloud storage).  
- Basic notification emails to investors (e.g. confirmation of completed steps like document signing or funds received).  

**Out of Scope:**  
- Administrative interfaces or back-office tools (e.g. no admin panel for managing investors or content; admin tasks will be handled outside the portal for now).  
- Management of tokenized contracts or visualizing how investor funds are deployed (the backend financial operations after funds are pooled are outside this portal’s scope).  
- Complex accreditation verification workflows beyond basic KYC (we assume investors using the portal are pre-vetted or will self-certify as accredited during onboarding if needed).  
- Investor communication features beyond the specified email confirmations (no in-portal messaging or extensive email campaign management).  

By focusing on the above scope, the portal will deliver a cohesive end-to-end experience for investors without extending into areas better handled by separate systems.

## User Role and Permissions  
**Investor (Accredited User):** This is the sole user role for the portal. All users are assumed to be accredited investors (either pre-confirmed by ShiFi or verified through the onboarding process). The investor user has the following capabilities and permissions:  
- **Account Management:** Create a personal investor account with email and password, log in to the portal, log out, and securely reset their password if needed. Each account is individual; no shared or team accounts are needed.  
- **Identity Verification:** Undergo KYC (Know Your Customer) identity verification and sign an NDA as part of onboarding. Until this step is completed successfully, access to sensitive investment content is restricted.  
- **Document Access:** Once verified, access a private “data room” containing confidential documents (investment decks, financial reports, offering memoranda, etc.). The investor can view and download these documents but not modify them.  
- **Investment Actions:** Initiate new investments by selecting from available offerings, providing required personal details (legal name, address), reviewing generated agreements, and signing contracts. They can link a bank account and authorize fund transfers for their investments.  
- **Dashboard Access:** View a personalized dashboard with information on all their investments (past and current), including status of each investment’s documentation and funding, as well as any payment transactions (deposits made, interest or payouts, etc.). They can also download copies of any signed agreements from their dashboard.  

*Permissions:* Investors can only view and act upon their own data. There is no cross-investor visibility. All operations (document viewing, signing, transferring funds) are restricted to the authenticated user’s context. The portal does not include any administrative override or content management by investors – they cannot edit official documents or alter terms.

Since there is no separate admin role in this portal, any administrative tasks (like uploading new documents to the data room or monitoring KYC results) are assumed to be handled via external systems or direct database/storage updates by ShiFi staff or developers.

## User Workflows  
To clarify how an investor interacts with the system end-to-end, below are the primary user flows:

### 1. New Investor Onboarding (Registration, KYC & NDA)  
1. **Account Registration:** A new investor navigates to the portal and creates an account by providing an email and password (and possibly confirming their email if email verification is required).  
2. **Login and Profile Setup:** The investor logs in with their new credentials. Upon first login, they are prompted to begin the verification process.  
3. **KYC & NDA Process:** The investor is presented with an embedded identity verification form (via Didit) in an iframe. They fill in personal information, upload any required ID documents, and electronically sign a Non-Disclosure Agreement. The Didit integration processes the KYC check (identity and AML verification) and captures the NDA acceptance.  
4. **Verification Outcome:** If KYC/NDA is successful, the investor’s status is marked as “Verified,” and they can proceed. If the verification is pending or fails (e.g. ID check failed), the portal informs the user (and may provide instructions or support contact for issues). Unverified users cannot access any further content.  

*Result:* A verified investor now has access to the data room and can explore investment opportunities. The NDA they signed is logged (and potentially stored as a PDF for record). The system ensures compliance by not exposing any sensitive info until this step is done.

### 2. Accessing the Data Room (Document Review)  
1. **Entering Data Room:** Once KYC is approved, the investor can click on a “Data Room” or “Documents” section in the portal.  
2. **Viewing Documents:** The portal displays a list of available documents (e.g. Investor Deck, ShiFi Financial Statements, Private Placement Memorandum (PPM), Promissory Note Template, Portfolio Performance Reports, Merchant Performance Reports, etc.). For each document, the investor can view a brief description and download or open it securely within the portal.  
3. **Secure Access:** Documents are hosted securely (in a protected storage like S3). When an investor requests a document, the system either streams it in a viewer or provides a time-limited download link to ensure security (so that only logged-in, verified users can fetch it).  

*Result:* The investor can educate themselves with all relevant information about ShiFi and the investment terms before deciding to invest. This section builds trust and understanding by giving transparency into ShiFi’s performance and offering details, under the protection of the NDA.

### 3. Initiating an Investment (Selecting Offer and Generating Agreement)  
1. **Choose an Investment Offer:** In the “Invest” section of the portal, the investor is presented with the available investment products. Two fixed-term offerings are available:  
   - **Option A:** **15% APY for 2 years** – A promissory note yielding 15% annual interest, with a 2-year maturity. Interest payout schedule to be defined by ShiFi (could be monthly, quarterly, or at maturity, but for the investor the key figure is 15% per annum for 2 years).  
   - **Option B:** **18% APY for 4 years (Deferred Interest)** – A 4-year promissory note at 18% annual interest. Interest accrues without payout for the first 2 years; then accumulated interest is paid out at the end of year 3, and regular interest payments or a lump sum at maturity in year 4 (depending on ShiFi’s structured terms). This effectively means investors receive no interest until year 3, when the first two years’ interest is paid, making it a higher-yield but longer-term option.  
   *(Both options have a **minimum investment amount of $10,000**. There is no stated maximum, and investors may make multiple separate investments if they choose.)*  
2. **Enter Investment Details:** After selecting Option A or B, the investor is prompted to input the specifics for this investment:  
   - **Investment Amount:** The dollar amount they wish to invest (must be \>= \$10,000, and validated by the form).  
   - **Legal Name:** The investor’s full legal name (for use in the contract documents). If the account is personal, this is likely pre-filled from KYC info but editable if needed (for example, if investing via an entity or trust, they might use that name).  
   - **Address:** The investor’s residential or business address (also for the contract). This may also be fetched from KYC details for convenience, but allow edits.  
   - (Optional: If needed, confirm the selected term again or other details like an acknowledgement of the interest structure.)  
3. **Generate Promissory Note:** Once the investor confirms the details, the system will generate a personalized **Promissory Note** contract for the chosen investment option. This is done via the **Thanks Roger API** integration: the portal sends the investor’s inputs (amount, name, address, chosen term/rate) to the Thanks Roger service, which fills in a promissory note template with these details. The template includes the legal terms of the note (e.g. interest rate, term, payment schedule, borrower and lender information, etc.). The output is a contract ready for signature.  
4. **Review Contract:** The investor is immediately presented with the generated promissory note document for review. This could be displayed directly on the portal (e.g. embedded PDF viewer or via Thanks Roger’s signing interface). The investor should be able to scroll through the entire agreement to read it.  
5. **e-Signature of Contract:** After reviewing, the investor applies their electronic signature to the promissory note. The Thanks Roger API will facilitate this signature step – for example, by embedding a signing widget or redirecting to a secure signing page where the investor clicks “Sign” (and perhaps draws a signature or types their name, depending on the implementation). The signing process should be straightforward and guided: a “Sign Agreement” button or similar call-to-action is provided.  
6. **Company Counter-Signature:** ShiFi (the issuer) may also need to sign the note. This could be automated such that the promissory note is pre-signed by an authorized ShiFi representative or the signature is applied via the template. Alternatively, Thanks Roger might allow dual-signature workflows. For the investor portal’s scope, ensure that by the end of this step the document is fully executed (signed by all required parties).  
7. **Confirmation of Signing:** Once the investor (and counterparty) have signed, the now-executed contract is finalized. The portal should display a confirmation message like “Your investment agreement has been signed!” and trigger the post-signing actions (detailed next).  

*Result:* The investor has officially entered into a binding agreement for the chosen investment. A signed promissory note PDF is now available for record-keeping. The system will next guide the investor to fund their investment.

### 4. Funding the Investment (ACH Bank Transfer via Plaid)  
1. **Connect Bank Account:** After contract signing, the portal prompts the investor to fund their investment amount (as specified in the promissory note). The investor is asked to link a bank account for an ACH transfer. The portal uses **Plaid** to handle this securely. When the investor clicks “Connect Bank Account” or “Fund via Bank Transfer,” the **Plaid Link** flow is launched in a modal or new window. The investor selects their bank or credit union, logs in with their banking credentials through Plaid’s secure interface, and authorizes the portal to retrieve their account details (account and routing number needed for ACH).  
2. **Select Account for Funding:** Plaid Link returns a token and info for the bank account the investor chooses (e.g. if they have multiple accounts at that bank, they pick one). The portal now has the necessary information (via Plaid’s API) to initiate an ACH debit of the investment amount from the investor’s account.  
3. **Initiate ACH Transfer:** Using the Plaid **Transfer API**, the portal’s backend creates a transfer request: specifying the source (investor’s linked account) and destination (ShiFi’s funding account), along with the amount to debit. This happens behind the scenes once the bank is linked and the investor confirms the transfer amount (which should match the agreed investment amount). The system should handle Plaid’s requirements for initiating transfers, such as obtaining a transfer authorization if needed and handling any limits or verifications ([Transfer - Creating transfers | Plaid Docs](https://plaid.com/docs/transfer/creating-transfers/#:~:text=Before%20initiating%20a%20transfer%20through,required%20to%20initiate%20a%20transfer)) ([Transfer - Creating transfers | Plaid Docs](https://plaid.com/docs/transfer/creating-transfers/#:~:text=3.%20The%20,or%20by%20calling%20%2030)).  
4. **Transfer Processing:** Upon initiating, the portal informs the investor that the transfer is in progress. ACH transfers are not instant – typically it may take a few business days to fully clear. The portal should now show the investment status as “Funding in progress” or “ACH Transfer Pending.” The investor can leave and come back later; the status should persist in their dashboard.  
5. **Confirmation of Funds Received:** The system should listen for confirmation that the funds have been successfully received in ShiFi’s account. Plaid provides webhooks or API endpoints to check transfer status (e.g., success or failure). When the ACH debit completes, the portal updates the investment status to “Funds Received” (and possibly the date received). If Plaid indicates the transfer failed or was returned (e.g. due to insufficient funds or a bank error), the portal should notify the investor and prompt them to try again or use a different account.  
6. **Dwolla Fallback (if needed):** In case the Plaid transfer cannot be completed for a particular bank (or if ShiFi decides to use another ACH provider), the system can fall back to using **Dwolla** for the ACH transaction. For example, if Plaid doesn’t support a certain bank for transfers, the investor’s account details (account/routing) could be passed to Dwolla’s API to initiate the ACH debit. This fallback would be invisible to the investor – they still follow the same steps. (The developer should implement Dwolla integration in a way that triggers only when needed, not as the primary path unless configured so.)  
7. **Post-Funding Acknowledgement:** Once the funds are marked as received, the investor is notified (e.g. an on-screen message or email stating “Your investment of \$X has been successfully funded.”). The dashboard entry for this investment now shows a fully completed status (contract signed and funds received). At this point, the investment is active.  

*Result:* The investor’s money is now in ShiFi’s investment pool. The investor’s obligations are complete; they can expect returns as per the contract terms. The portal now primarily serves as a read-only dashboard for this investment (until perhaps the investor makes another investment, in which case they repeat the selection, signing, funding flow). 

### 5. Post-Investment Dashboard & Ongoing Access  
1. **Investment Dashboard:** The investor can navigate to their **Dashboard** or **Portfolio** section at any time (after logging in) to see an overview of their investments. For each investment made, display key details such as:  
   - Investment option selected (e.g. “15% APY – 2yr” or “18% APY – 4yr”), and perhaps a short label or ID for the promissory note.  
   - Principal amount invested.  
   - Date of investment (agreement date) and maturity date (when the term ends).  
   - Current status of funding: e.g. “Pending Transfer” (if the ACH is in progress), “Active (Funded)” if funds are received, or “Completed” if an investment term has ended (future functionality).  
   - Status of documentation: e.g. “Agreement Signed on [date]” (possibly show a green checkmark indicating the contract is signed).  
   - A link or button to view/download the signed promissory note (PDF).  
   - If relevant in the future, summary of interest payments made or pending (for example, if interest is paid annually or at maturity, this section might list “Interest payout of \$Y scheduled for [date]”). Initially, since no payouts have happened yet, this might not show much, but the infrastructure should allow showing payment history once available.  
2. **Payment History:** Within the dashboard, or a sub-page, provide a **Payment History** or **Transaction History** for the investor. This would list all financial transactions related to the user’s investments:  
   - **Incoming payments (deposits):** e.g. the initial funding ACH debit of \$X on [date] for each investment (mark as Completed or Pending accordingly).  
   - **Outgoing payments (distributions):** e.g. interest payments or principal repayments sent to the investor’s bank. Even if the portal launch is before any payouts occur, the design should accommodate these entries. Any scheduled or pending payouts should be indicated (e.g. “\$500 interest – Pending (expected 2025-12-31)”).  
   - Each entry should have a date, description, amount, and status (Pending, Completed, Failed, etc.). Pending can cover things like an ACH that is initiated but not cleared or an upcoming scheduled payment.  
3. **Document Vault:** The portal should provide a section (or within each investment entry) where the investor can access all their signed documents. This includes the promissory notes for each investment and possibly the NDA they signed (and any other documents that were specifically executed by the investor). There should be an easy way to download these files for their records (e.g. a “Download PDF” button). Additionally, the standard reference documents from the data room could remain available here or in the data room section for reference.  
4. **Account Management:** The investor can update certain account info if necessary. Basic profile updates like changing their password, or updating contact information (email, phone) could be allowed. If they need to change the bank account on file for receiving payouts, that could be allowed by re-triggering the Plaid Link flow to link a new account (though initially, using the same linked account for payouts is simplest).  
5. **Log Out and Session Management:** The user should be able to securely log out. The system should also time-out inactive sessions for security (e.g. auto log out after 15-30 minutes of inactivity).  
6. **Subsequent Investments:** If the investor decides to make another investment, they can repeat **Flow 3 and 4** (Investment initiation and funding) at any time by going to the Invest section again. The portal supports multiple active investments per user, so each will appear as a separate entry in the dashboard. The KYC is done only once; subsequent investments do not require repeating KYC or NDA (unless perhaps a long time has passed and re-verification is needed, but that’s out of initial scope).  

*Result:* The investor has a one-stop portal to track everything about their involvement with ShiFi. They can always log in to see how many investments they have, check that their money was received, review what they signed, and later, see how and when they will be paid back. This transparency and accessibility can improve investor confidence and reduce support inquiries.

---

The above flows demonstrate the end-to-end journey for the user. Next, we detail the specific requirements and features that make these flows possible.

## Detailed Functional Requirements  

### 1. User Registration & Authentication  
- **Account Creation:** The system shall allow a new user to register an investor account using an email address and password. Minimal information will be collected at sign-up (to reduce friction) – just email and password, plus a confirmation of terms of service if applicable. Optionally, include a checkbox affirmation that they are an accredited investor (for compliance).  
  - *Password Policy:* Enforce a strong password (e.g. minimum length 8+ characters, require a number/symbol) to enhance security.  
  - *Email Verification:* (Optional but recommended) After sign-up, send a verification email with a link the user must click to confirm the email before they can proceed to KYC. This prevents use of invalid emails and ensures communication can reach the user.  
- **Login:** Investors can log into the portal using their registered email and password. The login system should be secure (protect against SQL injection, use salted password hashing in the database, and limit failed attempts to mitigate brute force).  
  - Use a modern authentication framework/protocol (e.g. JWT or secure session cookies over HTTPS) to manage user sessions. Ensure all pages and APIs require an authenticated session for access (especially the data room, investment flows, and dashboard).  
- **Password Reset:** Provide a “Forgot Password” flow. The investor can request a password reset by entering their email; the system emails a secure, time-limited link that allows them to set a new password. After reset, the user can log in with the new password.  
- **No Admin Role:** There is no separate admin login or role within this system (administration is out-of-scope). All authentication is user-facing for investors only.  

*Rationale:* A straightforward but secure auth system is critical since investors will access sensitive financial info. Rely on existing robust libraries for auth to reduce security risks. This part serves as the gatekeeper to ensure only authorized individuals (and specifically those who are accredited and passed KYC) can use the portal.

### 2. KYC Verification & NDA Signing (Didit Integration)  
- **Integrated KYC Workflow:** Upon first login (post-registration), the user must complete an identity verification (KYC) process. The portal will integrate with **Didit** (a KYC provider) to handle this. Specifically, the front-end will load Didit’s verification interface in an **iframe** or embedded widget so the user does not leave the portal. This interface will gather all necessary information and documents from the user (such as government ID upload, selfie, etc., as required by Didit) and perform checks (AML watchlists, identity verification).  
- **NDA Signing:** As part of the onboarding, the investor must sign a Non-Disclosure Agreement. This requirement will be fulfilled within the Didit flow if possible – e.g., Didit might allow including a custom agreement for the user to agree to. The NDA should be presented to the user (they can read it) and then they either check a box or e-sign to indicate agreement. If Didit’s platform does not support NDA, we may need a separate step in the portal just before KYC or just after where the user signs an NDA (possibly using the Thanks Roger e-sign as well). However, per requirements, **reusing the Didit integration** is preferred to avoid building a second e-sign step.  
- **Blocking Data Room Access:** Until the KYC and NDA are successfully completed and verified, the user **must not** have access to the data room or investment features. This means the portal should mark the user as “Not Verified” or “KYC Pending” initially. The UI should guide them to complete verification and clearly indicate it’s required. Attempts to access protected sections should check the user’s status and redirect to the KYC step if not done.  
- **Reusing Existing Logic:** ShiFi already has KYC integration logic in other customer flows. The development should leverage that existing code or approach where possible (for example, reusing API client code to Didit, webhook handling for results, etc.). This ensures consistency and saves time.  
- **KYC Completion Handling:** When the user finishes entering data in Didit’s iframe, Didit will process the verification, which might take a short time (possibly seconds or minutes). The portal backend should receive a **webhook or callback** from Didit indicating the result (e.g. “verification_passed” or “failed” along with user ID). Upon a successful verification, the user’s account in our database is updated to “Verified=Yes.” If Didit immediately provides results via the iframe session, we can also immediately unlock access.  
  - In case of a **failure or flags** (e.g., the user’s identity couldn’t be verified or they failed AML checks), the portal should display an error message or instruct the user on next steps (perhaps “Verification failed. Please contact support or try again with valid documents.”). They should not proceed further unless manually cleared by an admin outside the system (again, admin actions are off-system, but we need to handle the user experience).  
  - If the verification is **pending manual review**, the portal should indicate that (“Verification in progress – you will be notified when complete”) and prevent data room access until the review is done and result is positive.  
- **Storing Verification Data:** The portal itself should **not store sensitive personal documents** from KYC (like ID images) – Didit handles that. We should store only the necessary status and reference info: e.g. Didit verification ID, status, timestamp, and maybe the NDA agreement as a PDF or a flag that NDA was signed. Didit might provide a copy of the verification report or NDA; if needed, store it securely (but it might be sufficient to trust Didit’s record).  
- **UX Considerations:** The KYC/NDA step should be as user-friendly as possible. Clearly explain why it’s needed (“Regulations require identity verification and NDA before proceeding”). Show a progress indicator if it’s multi-step. Ensure mobile compatibility since some users may use phone camera to upload ID, etc.  

*Success Criteria:* The user cannot proceed to view/download any confidential documents or make investments until they have passed KYC and signed the NDA. Once they have, they should seamlessly gain access to the next steps without needing to log out/in (the app should notice the status change in real-time or on next page load). This mechanism protects ShiFi’s sensitive info and ensures only eligible, verified investors participate.

### 3. Secure Data Room Access  
- **Unlock Upon Verification:** The “Data Room” section becomes available to the investor only after successful KYC/NDA. In the UI, this might mean the Data Room menu was previously disabled or hidden and now is enabled.  
- **Document Repository:** The portal will display a list of documents that ShiFi wants to share with potential investors. These likely include (but are not limited to):  
  - **Investor Pitch Deck:** A presentation outlining ShiFi’s business model and investment opportunity.  
  - **ShiFi Financials:** Financial statements or summaries showing company performance.  
  - **Private Placement Memorandum (PPM):** A legal disclosure document detailing the investment offering terms, risks, and conditions.  
  - **Promissory Note Template:** A blank template of the promissory note contract, so investors can preview the terms of the agreement for the 2-year and 4-year notes before actually filling one out. Possibly two separate templates if terms differ.  
  - **Portfolio Performance Reports:** Data on how ShiFi’s overall investment portfolio has performed (to give investors insight into track record).  
  - **Merchant Performance Reports:** Since ShiFi uses investor funds to buy merchant contracts (as implied by tokenized contracts), this could show how the underlying merchant assets are performing (credit quality, returns, etc.).  
- **Document Presentation:** For each document, show the title and a short description. Provide an action to **view or download**. Options for implementation:  
  - Viewing inline (embedding PDFs or using a PDF.js viewer) versus forcing download. Inline viewing is convenient but ensure it’s still secure (not caching sensitive files inappropriately).  
  - Downloads should be PDF or common formats. The system should ideally watermark the documents with the investor’s email or ID if extra security is desired (not in scope currently, but a note if needed to prevent sharing).  
- **Security Controls:** All documents are stored in a secure storage bucket (such as AWS S3) with access control. The backend should generate signed URLs or fetch the document and stream it to authenticated users, to prevent any unauthorized access. At no point should the documents be publicly accessible without auth.  
- **Updating Content:** Although no admin UI is in scope, the system design should allow new or updated documents to be added to the data room by developers or scripts. Document metadata (title, description, file link) might be stored in a database or configuration file. ShiFi staff should have a straightforward way (even if manual) to update these as needed (e.g. update the PPM for a new offering).  
- **Audit/Tracking (Optional):** It may be useful to log when a user downloads a document (for compliance, to know who has seen what). This could be as simple as logging an event “User X downloaded PPM.pdf on 2025-03-31”. Not a strict requirement, but consider for completeness.  

*Outcome:* Verified investors can educate themselves by accessing all the relevant documents in one place. This fosters trust and aids their decision-making. The system ensures these documents remain confidential and only accessible under NDA, fulfilling ShiFi’s need to protect sensitive information.

### 4. Investment Offerings Selection  
- **Display of Offerings:** Under an “Invest” or “New Investment” section, present the two available investment products clearly. Include key details for each: interest rate, term length, minimum lock-up, any payout specifics (like deferred interest for the 4-year note). This can be in a side-by-side card format or a list. Investors should readily understand the difference to choose according to their preference.  
- **Selection UI:** The investor can select one of the options (e.g. a radio button or card selection). If more offerings are added in the future, the design should accommodate a list, but for now it’s just two.  
- **Input Investment Amount:** Provide a field for the investor to enter how much they want to invest. Include help text about the minimum (\$10,000). If they enter less than 10k, show a validation error. There is no upper limit enforced by the system, but we may want to sanity-check extremely large amounts or at least handle large number formatting.  
- **Legal Name & Address:** As part of initiating the investment, collect the investor’s legal name and address. Pre-populate these fields with any known data (perhaps from KYC). Allow editing in case the investor wants to use a different investing entity or correct something. This data will be merged into the contract.  
- **Accreditation Confirmation (Optional):** Since only accredited investors should invest, the portal might include a reaffirmation checkbox here: “I confirm I am an accredited investor under SEC Rule 501.” However, if we trust the onboarding process handled that, this may not be necessary each time.  
- **Start Document Generation:** Once the investor fills the form and clicks “Continue” or “Generate Agreement,” the system should validate all inputs (non-empty, amount >= minimum, etc.). Then, it proceeds to generate the promissory note via Thanks Roger as described in the next section. Possibly show a loading indicator while the document is being prepared if it’s not instantaneous.  

*Edge Cases:* If the user navigates away or closes the browser after this but before signing, the system should save a draft investment entry or at least not lose the input data. Perhaps mark the investment as “Document Generated – Awaiting Signature” so that when they log back in, they can resume signing instead of starting over. This ensures a partially completed flow can be recovered. (This can be handled by saving the form data once submitted and allowing re-entry into the signing step.)

### 5. Promissory Note Generation & E-Signature (Thanks Roger Integration)  
- **Template Setup:** Ahead of time, ShiFi will have prepared promissory note template documents for each investment option on the Thanks Roger platform. These templates contain placeholders for variables like Investor Name, Address, Investment Amount, Interest Rate, Term, Effective Date, etc. The developer will need the Template ID or similar reference to call the API.  
- **Document Generation via API:** When the user initiates contract generation, the backend calls the **Thanks Roger API** (e.g. an endpoint to create a new contract from template) providing the necessary data. The API returns a document (or a draft contract) and possibly a URL or ID for the signing ceremony. The system should handle any API keys/secrets for this securely (do not expose in front-end).  
  - Example: `POST /contracts` with payload {template_id, signer_name, signer_email, signer_address, amount, etc.} and it returns a unique `contract_id` or a signing URL.  
- **Presenting the Document:** Utilize the API response to present the contract to the user for signature. Options:  
  - **Embedded Signing:** If Thanks Roger supports embedding the signing UI via iframe or a JavaScript SDK, use that so the user signs directly on the portal page.  
  - **Redirect or Popup:** Alternatively, redirect the user to a hosted signing page (provided by Thanks Roger) in a new tab. If so, instruct them clearly (e.g. “Your contract is ready to sign, it will open in a new window. Please complete the signature and then return here.”).  
  - Ensure the user experience is smooth and trustworthy – show the document clearly, have a prominent “Sign” action, and possibly require the user to confirm their signature (like typing their name or drawing a signature) depending on e-sign compliance requirements.  
- **Signature Completion:** Once the investor signs, the system needs to know. Possible methods:  
  - **Webhook Notification:** Thanks Roger can send a webhook to our backend when the contract is signed by the user (and countersigned if applicable) ([Feature update: APIs for CRM integration | ROGER](https://www.thanksroger.com/blog/apis-for-crm-integration#:~:text=Sync%20Your%20CRM%20When%20Contracts,Are%20Signed)) ([Feature update: APIs for CRM integration | ROGER](https://www.thanksroger.com/blog/apis-for-crm-integration#:~:text=Webhooks%20eliminate%20the%20manual%20work,on%20setting%20up%20this%20functionality)). The backend should capture this event and mark the contract as signed in our database.  
  - **Polling/Callback:** Or if we embedded the signing, the UI might receive a callback when completed, or we poll the API until it indicates “signed”.  
  - Regardless, ensure that we only consider the process finished when the contract is fully executed (all required signatures done).  
- **Store Signed Document:** After signing, retrieve the signed PDF from Thanks Roger (the API likely has a way to download the final document file). Store this file in our secure storage (e.g. S3 bucket) associated with the investor’s record. This allows us to serve it in the dashboard later. Also store metadata like the signing date.  
- **Email Confirmation:** Trigger an email to the investor upon successful signing. The email should thank them for their investment, confirm the key terms (amount, product, date), and attach or link to a copy of the signed promissory note for their records. The email should be sent from a ShiFi email address and be properly formatted as a confirmation receipt.  
- **Error Handling:** If the user declines to sign or something goes wrong (e.g. network error, or they simply close the signing window), handle that: The investment can remain in a “Awaiting Signature” status. The user should be able to retry signing by revisiting the investment (maybe a “Sign Document” button on their dashboard if not signed yet). If the user explicitly doesn’t want to proceed, we might allow them to cancel that pending investment (maybe by contacting support to void the draft contract). For MVP, we can assume if they initiate, they intend to sign, and handle cancellation manually if needed.  

*Goal:* Make signing the contract as easy as an e-commerce checkout step. By integrating Thanks Roger, we offload the heavy lifting of legal e-signature compliance and document templating. The outcome is a legally signed promissory note, stored and shared with both parties, which paves the way for funding.

### 6. Funding via ACH Transfer (Plaid & Dwolla Integration)  
- **Plaid Bank Linking:** As described in the flow, after signing the note, the investor will link a bank account using Plaid. The portal must implement the Plaid **Link** flow specifically for ACH transfers ([Transfer - Creating transfers | Plaid Docs](https://plaid.com/docs/transfer/creating-transfers/#:~:text=Before%20initiating%20a%20transfer%20through,required%20to%20initiate%20a%20transfer)). Key implementation points:  
  - Obtain a **Link token** from our backend (via Plaid API) that is configured for transfers (Plaid allows specifying the product as “transfer” during token creation).  
  - Use the Link token in the front-end to open the Plaid widget. The user completes the bank login and selects an account.  
  - In the onSuccess callback of Plaid Link, get a `public_token` and an `account_id`. Send these to the backend to exchange for a permanent `access_token` and retrieve account details.  
  - For security and compliance, do not store the user’s banking credentials; Plaid handles that. We store the Plaid `item_id` and `account_id` associated with the investor, and possibly the masked account number and bank name for reference on the UI (e.g. “Bank of America ****1234”).  
- **Initiating Transfer:** Use Plaid’s **Transfer API** to initiate the ACH debit from the investor’s account to ShiFi’s account. This involves:  
  - Creating a **transfer authorization** (Plaid may require an authorization step to check risk, etc., via `/transfer/authorization/create`).  
  - Creating the transfer (`/transfer/create`) with details: amount, currency, transfer type (debit), origination account (the investor’s linked account via Plaid), destination (ShiFi’s bank – which we would have connected to Plaid as a business account or provided as a funding destination in Plaid’s dashboard), and description (e.g. “ShiFi Investment Funding”).  
  - Handling the response which likely contains a transfer ID and status (initially scheduled or pending).  
  - The backend should log this transfer in our database with status “pending” and link it to the investor’s investment record.  
- **Handling Transfer Webhooks:** Plaid can send webhooks for transfer status updates ([Feature update: APIs for CRM integration | ROGER](https://www.thanksroger.com/blog/apis-for-crm-integration#:~:text=Roger%20now%20makes%20it%20easier,updated%20in%20your%20CRM%20system)), or we can poll the status via API. The system should be set up to update the transfer status asynchronously:  
  - When a “transfer.completed” event arrives (or a successful status via poll), mark the investment as funded.  
  - If a “transfer.failed” or “transfer.returned” event arrives (ACH failure), mark it accordingly and alert the user. Perhaps also send an email or notification to ShiFi ops for follow-up.  
- **Dwolla Integration:** Implement Dwolla as a contingency method for transfers. Dwolla could be used if Plaid’s transfer cannot be used for some reason (maybe the user’s bank isn’t supported by Plaid for instant verification, etc.). Dwolla requires collecting the routing and account number; if Plaid Link provides those under certain conditions (Plaid Auth can provide account/routing for verified accounts), we can create a Dwolla funding source and initiate a transfer via Dwolla’s API. This is complex to do in parallel, so likely a simpler approach: rely on Plaid for most, and only if instructed (by a feature flag or config) use Dwolla. The PRD requirement is just to acknowledge Dwolla as a fallback – actual implementation can be secondary.  
- **Transfer Limits and Timing:** The system should gracefully handle the fact that ACH transfers take time. Communicate to the user that it may take e.g. 1-3 business days for funds to clear. We might display an interim status like “Awaiting Funds” or “Transfer in Progress” on the dashboard. If Plaid offers instant verification and same-day ACH, ShiFi might opt for that, but by default assume standard ACH.  
- **Funds Settlement:** All funds are to be deposited into a designated **ShiFi Investment Fund bank account**. That account’s details will be set up in Plaid/Dwolla ahead of time (this is a prerequisite – ShiFi’s bank account must be linked on the platform side). The portal should not expose those details, just ensure transfers target it.  
- **Post-Funding Confirmation:** Once an ACH is completed, aside from updating the status in the dashboard, send an email notification to the investor confirming receipt. Also, it would be wise to include what happens next (e.g. “Your funds have been received. Your investment is now active. You will start earning interest immediately per the agreement. You can view your investment status anytime in the portal.”).  
- **Multiple Investments:** If an investor does multiple investments, they can either reuse the same linked bank (likely yes – if they’ve linked once via Plaid, we can use that `item` to do additional transfers with their consent). Possibly for each investment, we still might want them to confirm the bank to use (in case they link multiple), but ideally allow them to choose from a saved account or link a new one. For MVP, simplest is one linked account per user that is used for all.  

*Security:* All communication with Plaid and Dwolla must be over HTTPS and with proper API key usage. Sensitive data like access tokens must be stored securely (encrypted at rest). Also comply with NACHA rules (e.g., store authorization proof that user agreed to ACH; using Plaid and having them click “I agree to allow transfer” may suffice). 

### 7. Investor Dashboard & Account Management  
- **Dashboard Overview:** Create a dashboard homepage for logged-in investors that summarizes their status. This page should be the first thing they see after logging in (post-verification). Key components:  
  - **Welcome Header:** Greet the user, possibly by first name. E.g. “Welcome, John. Here is an overview of your investments.”  
  - **Summary Cards:** If desired, show high-level stats: total amount invested across all deals, number of active investments, total interest earned to date (if applicable). These are nice-to-have metrics that give a quick picture.  
  - **Investment List:** A list (or table) of the user’s investments. Each entry includes the details as described in the Post-Investment flow: product type, amount, start date, status, and actions (view details, download docs). If the user has none yet, this section will indicate “No investments yet – get started by choosing an offering.”  
- **Investment Detail View:** The user should be able to click an individual investment entry to see more details. This could be a dedicated page or an expansion on the dashboard. In detail:  
  - Reiterate the key terms (interest rate, term, maturity date).  
  - Display the **Payment Schedule** if available – e.g., interest payment dates (for the 4-year note, it might show “Interest accrues until Year 3, then paid on 2027-01-01, then annually until maturity”). For the 2-year, maybe interest monthly or at maturity depending on how ShiFi defines it. If ShiFi hasn’t defined a schedule, this might be left simple.  
  - Show the **Transfer Status** for funding: if pending, perhaps allow the user to see more info (“Transfer initiated on X date via ACH. Typically completes in 2-3 days.”). If failed, offer instructions to re-initiate.  
  - Provide links to **Documents**: the signed promissory note, and maybe reference docs like the PPM or NDA if relevant.  
  - (In the future, if interest payments occur, this page could show a history of payments received for this investment.)  
- **Download All Documents:** The requirement specifically mentions an option to “download all signed documents.” We can implement this as a convenience feature: e.g., a button “Download All” that bundles all the user’s signed contracts (and perhaps NDA) into a ZIP file for them. Alternatively, it could just mean an easy way to get each document. Clarify if needed, but likely providing individual downloads is sufficient, and “download all” could be an enhancement.  
- **Profile Settings:** Provide a section for account settings where the investor can:  
  - Change their password.  
  - Update their contact info (address or phone, if we store any). This might or might not reflect in signed agreements (probably not retroactively, but new investments could pull the latest address).  
  - View their linked bank account details on file (mask the numbers). Possibly allow unlinking or updating the bank account for future transfers or upcoming payouts.  
  - Enable two-factor authentication (2FA) if ShiFi wants extra login security – not required in initial requirements, but a good security enhancement for the future, especially as money is involved. (For now mention as a consideration, but not mandatory to implement MVP).  
- **Logout:** A simple logout button that ends the session. After logout, ensure no sensitive data remains cached in browser (best practices like clearing session tokens).  
- **Responsive Design:** Ensure the dashboard (and entire portal) is mobile-responsive. Some investors might use tablets or phones to check status. The design should adapt (cards stack vertically, menus collapse to a burger, etc.).  

### 8. Notifications and Email Communications  
- **Verification Confirmation Email:** After an investor successfully completes KYC (if our system gets a clear signal for that), optionally send an email: “Your identity has been verified. You now have access to the ShiFi Investor Portal data room.” This is a nice touch and also serves as a record.  
- **Document Signing Confirmation:** As mentioned, when an investment agreement is executed, an email must be sent with the signed document attached or linked. This email should contain: investor’s name, investment amount, term, maybe an ID or reference number of the contract, and a thank-you message. It should also provide next steps: e.g. “Please proceed to fund your investment via the portal. If you have any questions, contact us at support@shifi...”.  
- **Funding Initiation Email:** When the investor links a bank and initiates an ACH, we might send a brief email: “We’ve initiated a transfer of \$X from your bank ending in 1234. You’ll be notified once the funds are received.” This step is optional, since the dashboard shows it, but some users like email records for everything.  
- **Funding Received Email:** Definitely send an email once the funds have been successfully received: “We have received your \$X investment. Your funds are now active in ShiFi’s investment pool. Thank you for your trust in us. Attached is a receipt of the transaction.” The receipt could just be the signed note again or a simple confirmation.  
- **Payment (Payout) Notification:** In the future, if an interest or principal payout is made to the investor, an email should notify them (“\$Y has been deposited to your bank account ending 1234 as an interest payment for your ShiFi investment.”).  
- **General Email Considerations:** All emails should be professional and branded with ShiFi’s logo and styling. Use a proper email service/API (e.g. SendGrid, Mailgun, AWS SES) to ensure deliverability. The system should have templates that include dynamic fields (name, amounts, dates). Also, all emails should be logged (to help support if investor claims they didn’t get something).  
- **No Marketing Spam:** Only send transactional emails related to the user’s actions. Marketing content or newsletters are outside the portal’s scope (likely handled by a separate CRM).  

### 9. Post-Funding Operations (For Clarity, Not in Scope to Develop)  
- Once investor funds are received in the ShiFi account, those funds are **pooled** and used by ShiFi to purchase tokenized contracts (as per ShiFi’s business model). This process is entirely on ShiFi’s backend and **not part of the investor portal** implementation. We note it here to provide context: the portal does not need to display any details of these tokenized contracts to the investor. Investors are essentially holding a promissory note (debt instrument) from ShiFi with promised returns, and they do not need to see how ShiFi deploys the capital in detail.  
- Because of this, the portal does **not** include features like showing token balances, or real-time investment of funds, etc. It is assumed ShiFi’s internal systems will manage and track those. The portal’s role ends at reflecting that the investor’s money is in the pool and later perhaps showing payouts.  
- The portal should however be designed in a way that if in the future ShiFi wanted to share some performance info, it could be added (for example, a generic “Portfolio Updates” section where they could post quarterly updates or something). But that’s an enhancement outside current requirements.  

By delineating this, we ensure the developer focuses on what needs to be built now, and avoids spending time on the backend financial logic which is handled elsewhere.

## Non-Functional Requirements  

### Security  
- **Authentication & Sessions:** Use industry-standard methods to secure user sessions (JWT tokens with short expiry and refresh tokens, or secure HTTP-only cookies, etc.). All API calls should require proper auth. Implement role-based checks even if there’s only one role, to easily extend later if needed.  
- **Data Protection:** Handle personal data (PII) with care. Passwords must be hashed (e.g. bcrypt). KYC personal info should largely stay in Didit; any that is stored (like name, address) should be in our database which is encrypted at rest. Documents containing personal data (the signed agreements have their name, address, signature) should be stored securely (S3 with encryption, restricted access).  
- **Secure Transmission:** The portal must enforce HTTPS for all pages and API calls, especially since sensitive data and banking info flows through. Use TLS 1.2+ and strong cipher suites.  
- **Prevent Vulnerabilities:** Follow best practices to prevent SQL injection, XSS, CSRF, etc. Use frameworks that provide built-in protection and perform security testing. For example, if using React + an API, implement CSRF tokens for forms or use JWT properly. Escape or sanitize any user-generated content (though here most inputs are forms that go to backend, which should also validate them).  
- **Access Control:** As noted, ensure that no investor can ever access another investor’s data. Use user-specific identifiers for all data fetches (e.g. filter by current user on any query for investments or documents). Also, the document storage should use per-user or per-investment paths that are not guessable.  
- **API Keys & Secrets:** The integration keys for Didit, Plaid, Thanks Roger, Dwolla, and email services must be kept out of client-side code. Store them in environment variables on the server. Do not log them. Use secure storage for any long-term credentials (like Plaid access tokens). The repository should not expose these keys (use something like a .env file not committed to version control).  

### Performance and Scalability  
- **User Load:** Initially, the number of users (investors) may be relatively small (perhaps dozens or hundreds, since it’s a private accredited investor portal). However, design the system to scale to thousands of users if ShiFi grows. Use scalable services (cloud DB, load balancers, etc.) such that adding more users or more documents will not degrade performance.  
- **Response Times:** The application should be reasonably responsive. Page loads and data fetches (from the REST API) should typically return in under 1-2 seconds. Heavy operations like document generation or large downloads depend on external factors, but the UI should show progress indicators if something takes more than a couple of seconds (e.g. generating a PDF or waiting for an ACH response).  
- **File Serving:** Use a CDN or efficient S3 links for document downloads to ensure fast and reliable file access. Large documents (if any financial report PDFs are big) should still open within a few seconds on broadband.  
- **Concurrent Usage:** Ensure that the system supports multiple investors signing documents or initiating transfers at the same time without issues (this means our use of external APIs should handle concurrency and we should not have race conditions in our DB updates for status etc.). For example, webhooks coming in from Plaid or Roger concurrently should be handled safely (consider locking or idempotency where applicable).  

### Maintainability & Extensibility  
- **Code Structure:** The codebase should be organized following best practices (e.g. component-based structure for React, modular routing and controller/services for backend). This makes it easier for future developers (or Replit AI) to maintain or extend.  
- **API Design:** The backend will expose a set of RESTful API endpoints to the frontend for various actions (get documents list, get dashboard data, post generate-investment, etc.). Design these APIs cleanly with proper versioning (e.g. `/api/v1/investments`). Use consistent naming and HTTP methods (GET for fetch, POST for create, etc.). Document the API routes and request/response formats in a README for reference.  
- **Integration Encapsulation:** The interactions with Didit, Plaid, Thanks Roger, and Dwolla should be abstracted into service modules. For example, have a `KYCService` that handles Didit API calls and webhook processing, a `SignatureService` for Thanks Roger, etc. This way, if ShiFi later switches providers (say from Didit to another KYC provider), it can be done with minimal changes to the rest of the system.  
- **Configurations:** Use configuration files or environment variables for things like the investment options (interest rates, terms), document templates IDs, etc. This allows changing certain parameters without code changes. For example, if ShiFi decides to adjust rates for a new cohort of investors, the values can be updated in config and reflected in generated docs.  
- **Logging and Monitoring:** Implement logging for key events (user login, KYC success/fail, document signed, transfer initiated/complete). This helps in debugging and auditing. Avoid logging sensitive data, but do log transaction IDs and statuses. Consider adding basic error monitoring (maybe integrating a tool like Sentry or simple email alerts for errors) so issues can be caught.  

### Compliance and Legal  
- **KYC/AML:** By using Didit, we ensure compliance with KYC/AML regulations for investor onboarding. We should store the verification status and reference ID from Didit as proof of compliance. If regulators ever ask, ShiFi can retrieve the full details from Didit’s dashboard or reports.  
- **Accreditation:** The assumption is investors using the portal are accredited. If needed, include a step for accreditation verification (some KYC providers offer this, or a simple signed statement from investor). Since it’s not detailed in requirements, we assume ShiFi separately vets investors or invites only those who are accredited.  
- **Reg D or Reg CF Compliance:** The portal should enforce any limits or rules relevant to the type of offering. For example, if it’s a Reg D 506(c) offering, ensuring accreditation is mandatory (which we have), and there might be a need to provide access to Form D or other notices. Not explicitly in scope, but just keep in mind the legal context of these investments.  
- **Data Privacy:** Investors’ personal data is being collected (name, address, maybe DOB in KYC, etc.). The system should comply with relevant data protection laws (GDPR if any EU persons, or CCPA in California, etc.). Include a privacy policy accessible on the portal. Also, give users some way to request data deletion (probably manual via support, outside scope to automate in portal).  
- **Document Legality:** The e-signed promissory notes must be enforceable. Using a reputable e-sign service (Thanks Roger) helps as it likely complies with ESIGN and UETA laws. The portal should retain the signed copies and any audit trail provided by the signing service in case of disputes.  

## Technical Requirements  

### Architecture Overview  
The Investor Portal will follow a modern web application architecture with a separate frontend and backend:  
- **Frontend:** A single-page application (SPA) built with a modern JavaScript framework, preferably **React** (as suggested) or an equivalent like Vue or Angular. React is recommended for its component model and rich ecosystem. The frontend will be responsible for the user interface, routing between pages (using e.g. React Router), and calling backend APIs for data. It will also handle integrating third-party widgets such as the Plaid Link flow and embedding the Didit and signing iframes.  
- **Backend:** A server-side application exposing a **RESTful API**. This could be built in Node.js (Express or Next.js API routes), Python (Django/Flask/FastAPI), or any suitable technology that the development team is proficient in. The backend handles business logic, database interactions, and communication with external services (Didit, Plaid, etc.). It will also manage user authentication (issuing JWTs or sessions).  
- **Database:** A secure database to store user accounts, investor profiles, investment records, and references to documents. A relational database like PostgreSQL is a strong choice (especially if using it for transaction records), but a NoSQL like MongoDB could also suffice. We will store structured data like user info, investment entries, status flags, etc. Document files themselves will not be stored in the DB but in cloud storage.  
- **Cloud Deployment:** The app should be deployable on a cloud platform (AWS, GCP, Azure, or even a platform like Heroku or Vercel for ease). Using containers (Docker) or serverless functions is optional; main requirement is that it’s accessible securely to users and can integrate with the needed APIs.  
- **Environment Management:** Different environments for development, testing, and production should be supported. Configs such as API keys will differ between these. Use environment variables for config, and possibly a .env file for local development (with a secure way to provide env vars in production).  

### Backend Specifics  
- **REST API Endpoints:** Define endpoints such as:  
  - `POST /api/register` (create account), `POST /api/login` (authenticate), `POST /api/password-reset` and `POST /api/password-reset/confirm` for auth flows.  
  - `GET /api/user` (get user profile & status, e.g. to check KYC status on frontend).  
  - `POST /api/kyc/start` and possibly webhooks at `/api/kyc/callback` (Didit will call our webhook here).  
  - `GET /api/documents` (list data room docs), maybe `GET /api/documents/:id` (fetch a specific doc or a signed URL).  
  - `POST /api/investments` (to create a new investment entry when user fills the form, triggering doc generation).  
  - `GET /api/investments` (list of investments for dashboard), `GET /api/investments/:id` (details including download links).  
  - `POST /api/investments/:id/sign` (to initiate the signing process, if not done as part of create) or this could be combined with create.  
  - `POST /api/investments/:id/fund` (to create a Plaid link token or initiate transfer – though Plaid link might be done purely on frontend with a token from `GET /api/plaid/link_token`).  
  - Webhooks: `/api/plaid/webhook` for transfer status events, `/api/roger/webhook` for document signing events.  
  - `GET /api/dashboard` might aggregate user info, investments, etc., or the front-end can call multiple endpoints to build the dashboard.  
- **Integrations Implementation:**  
  - **Didit:** The backend will contain the client logic to interact with Didit’s API. Likely use Didit’s session creation API to start a verification session when a user needs to do KYC. Pass the session info to the frontend to load the iframe (e.g. Didit might give a session URL or token that the iframe uses). Also handle the webhook from Didit that gives the result.  
  - **Thanks Roger:** Include a client for the e-sign API. Configure template IDs for the promissory notes in a config file or database. When called, fill in the dynamic fields and create the contract. Also set up a webhook endpoint to capture the signature completion.  
  - **Plaid:** Use Plaid’s Node/Python SDK if available for easier calls. The backend needs endpoints to create link tokens (`/link/token/create` as Plaid docs show) and endpoints to create transfers. Also a webhook endpoint for transfer events. Properly authenticate these calls with Plaid secrets.  
  - **Dwolla:** If using Dwolla, initialize the Dwolla API client with our keys and have functions to create customers/funding sources and transfers. Possibly create a customer for each investor (Dwolla concept) and link their bank via routing/account (which we’d only do if Plaid fails to provide a usable token). This is advanced; for MVP, maybe document but not fully implement unless needed.  
  - **Email Service:** Use an SMTP service or email API. Possibly something like SendGrid API (which can be called from backend with an API key) or AWS SES. The backend will have templates (possibly just coded strings with placeholders, or use a templating engine). Ensure emails are sent asynchronously (so as not to delay user actions; use background job or at least don’t block HTTP response on email sending).  
- **Document Storage:** Set up an AWS S3 bucket or similar storage (Azure Blob, GCP Cloud Storage) for storing files: data room files and signed contracts. The backend should have access keys to upload and retrieve these. 
  - For data room files, they might be pre-uploaded manually. The API can either serve them by reading from S3 (ensuring the user is auth) or by generating a short-lived pre-signed URL that the frontend can use to download directly from S3 (the latter offloads file transfer to S3, which is efficient and secure if done right).  
  - For signed agreements, when retrieved from Thanks Roger, save them to S3 with a structured key (e.g. `agreements/{investmentId}.pdf`). Possibly also store NDA PDF if we have one.  
- **Database Design:** At minimum, tables/collections for:  
  - Users (id, email, password_hash, kyc_status, name, etc., plus timestamps).  
  - Investments (id, user_id, option_selected, amount, status, created_at, etc.). Could include fields like interest_rate, term_years for clarity, or derive those from option. Also store whether doc_signed (boolean), funded (boolean) and dates for each.  
  - Documents (maybe for data room docs, but those could be just a static list, not necessarily in DB unless we want to allow easy updates). Possibly a table if ShiFi staff will update via some interface later.  
  - Transactions/Transfers (transfer_id, investment_id, type [debit/credit], amount, status, etc.) to log funding and future payments. This might overlap with Investments but useful to separate money movement.  
  - Could also have a table for “SignedAgreement” linking to an S3 file path, but storing in Investments table a link to the file might suffice.  
- **Testing:** Include unit tests for critical backend logic (especially for any calculations, although here mostly integration). Also, test the integration flows in a sandbox environment: Didit sandbox for KYC, Plaid sandbox for ACH (Plaid has sandbox modes), and whatever testing mode Thanks Roger has. Make sure webhooks and callbacks are working as expected.  

### Frontend Specifics  
- **Tech Stack:** Use React with functional components and hooks (or Next.js if server-side rendering is desired, but an SPA is fine for a portal behind login). Use state management as needed (React Context or Redux if the app becomes complex). For styling, ShiFi likely has branding guidelines; use a modern component library or custom styles consistent with ShiFi’s look (colors, logo). Ensure a professional financial feel.  
- **Page Components:** Likely pages/components: Login, Register, KYC (verification) page, Data Room listing, Investment form, Signing view, Funding (bank link) view, Dashboard overview, Investment detail, and maybe Settings.  
- **Routing & Access Control:** Protect routes so that unauthenticated users can’t hit them (if someone tries to go to /dashboard without login, redirect to /login). Also, protect routes that require KYC (if user is logged in but not verified and tries /data-room or /invest, redirect to /verify). This logic can be done with route guards or conditional rendering after fetching user status.  
- **Integration UI:**  
  - For Didit (KYC): likely just an `<iframe src={diditSessionUrl} />` on a verification page. Might also display some instructions or a loading spinner until the iframe loads. After submission, Didit might redirect or the iframe might show a “Thank you” – ideally we rely on webhook for final status, but we could also have the iframe postMessage or something if they support. We’ll need to communicate to the user if it’s pending or done (maybe poll our backend for status if not immediate).  
  - For Plaid: use the official Plaid Link JavaScript to open the bank chooser. This is usually a pop-up modal style. We must handle the onSuccess callback in JS to then inform our backend. Plaid provides a Link SDK for React which can simplify this.  
  - For Thanks Roger: if an embedded signing option exists, include that component or an iframe. If not, handle the redirect flow as described.  
- **Form Handling and Validation:** Use form libraries or simple state to handle input for registration, investment details, etc. Provide user-friendly validation messages (e.g. “Please enter an amount at least \$10,000”).  
- **Visual Design:** The portal should have a clean, intuitive UI. Given it’s financial, lean towards a professional theme (e.g. blues or greens, consistent with finance). The data room might show a list with document icons, the invest page might use icons or graphics for the 2-year vs 4-year plan to differentiate them. The dashboard could use simple charts or icons indicating status (like a checkmark for completed funding, an hourglass for pending, etc.). These design elements, while not fully specified, should be considered by the developer or a UX designer.  
- **Mobile Friendly:** Use responsive CSS (flexbox/grid) and possibly a UI framework (Bootstrap, Material UI, or Ant Design) to expedite consistent design. The layout should collapse nicely on smaller screens. Test critical flows (KYC iframe, Plaid link – Plaid link is mobile-friendly; Didit presumably is as well or at least might need a full device screen).  

## External Integrations Details  
*(Summarizing third-party components and how they tie in, for clarity and any developer onboarding this project.)*

- **Didit (KYC & NDA):**  
  - *Function:* Verify identity of investors and collect NDA agreement.  
  - *Integration Method:* Embedded iframe for user input, plus backend REST API & webhooks for session creation and result.  
  - *Developer Needs:* Didit API credentials (client ID/secret, webhook secret). Configure Didit to send webhook to our backend. Possibly custom configuration on Didit’s side to include our NDA text in the flow.  
  - *Relevant Docs:* Didit Identity Verification API (session creation, statuses) ([Didit Docs](https://docs.didit.me/identity-verification/full-flow#:~:text=Webhook%20for%20Verification%20Status)). The developer should refer to Didit’s documentation for embedding and verification link usage.  

- **Thanks Roger (Electronic Signature & Document Generation):**  
  - *Function:* Generate contracts from templates and obtain electronic signatures.  
  - *Integration Method:* Server-side API calls to generate contracts and retrieve documents; possibly client-side widget or URL for signing ceremony. Webhook for signature completion to update status.  
  - *Developer Needs:* Thanks Roger API key, Template IDs set up for each type of promissory note. Webhook endpoint on our side configured in Thanks Roger admin (so it calls us when signed).  
  - *Relevant Docs:* Thanks Roger’s API for creating and sending contracts, as well as webhooks for signed contracts ([Feature update: APIs for CRM integration | ROGER](https://www.thanksroger.com/blog/apis-for-crm-integration#:~:text=Roger%E2%80%99s%20latest%20Send%20Contract%20URL,to%20manually%20input%20this%20data)) ([Feature update: APIs for CRM integration | ROGER](https://www.thanksroger.com/blog/apis-for-crm-integration#:~:text=Roger%20now%20makes%20it%20easier,updated%20in%20your%20CRM%20system)). Ensure to handle any signer authentication (the user likely needs to verify their email in the signing process, but since they’re logged in, it might be implicit).  

- **Plaid (Bank Account Linking & ACH Transfers):**  
  - *Function:* Allow users to connect their bank accounts and initiate ACH transfers (both debiting for investment and crediting for payouts).  
  - *Integration Method:* Frontend Plaid Link for user bank login; backend Plaid API for exchanging tokens and initiating transfers; webhooks for transfer status.  
  - *Developer Needs:* Plaid client ID, secret, and a Plaid account set up with Transfer enabled. Must have ShiFi’s bank account configured as the destination (likely via Plaid’s dashboard or API). Webhook URL for Plaid events. Also, handle Plaid environment (Sandbox for testing vs Production).  
  - *Relevant Docs:* Plaid Transfer quickstart ([Transfer - Creating transfers | Plaid Docs](https://plaid.com/docs/transfer/creating-transfers/#:~:text=Before%20initiating%20a%20transfer%20through,required%20to%20initiate%20a%20transfer)) ([Transfer - Creating transfers | Plaid Docs](https://plaid.com/docs/transfer/creating-transfers/#:~:text=3.%20The%20,or%20by%20calling%20%2030)), Plaid API reference for transfers, and Auth if needed to get account numbers.  

- **Dwolla (ACH alternative):**  
  - *Function:* Backup service to move money via ACH if Plaid is insufficient. Dwolla can also handle ACH payouts.  
  - *Integration Method:* Direct API calls from backend to create customers and transfers. Might use Plaid’s bank verification in tandem (there’s a known pattern Plaid + Dwolla ([Auth - Dwolla | Plaid Docs](https://plaid.com/docs/auth/partnerships/dwolla/#:~:text=Auth%20,the%20ACH%20or%20RTP%C2%AE)) for instant account verification then passing to Dwolla).  
  - *Developer Needs:* Dwolla API keys and account setup. This is secondary; perhaps implement only basic integration in case needed.  
  - *Relevant Docs:* Dwolla API documentation for creating funding sources and transfers ([Bank Funding Source | Dwolla API Documentation](https://developers.dwolla.com/docs/balance/bank-funding-source#:~:text=Bank%20Funding%20Source%20,used%20to%20create%20ACH%20transfers)).  

- **Email Service:**  
  - *Function:* Send notification and confirmation emails to investors automatically.  
  - *Integration Method:* Use a transactional email API. Could be SMTP through a service or a REST API. Ensure emails are triggered at the right events (post-sign, post-funding, etc.).  
  - *Developer Needs:* An API key for the chosen email service and template designs for each type of email (even if just simple text initially).  
  - *Notes:* Verify that emails don’t go to spam (use proper from address, possibly setup SPF/DKIM for ShiFi domain).  

By detailing these, the developer has a checklist of external systems to configure and test with, which is crucial for successful integration.

## Deliverables  
- **Fully Functional Investor Portal Web Application:** The end product should be a deployed web application accessible to users (at a URL provided by ShiFi). It must implement all the functional requirements above – including registration, KYC gating, document display, investment creation, e-signature, funding, and dashboard updates. It should be tested and ready for real users.  
- **Source Code Repository:** All source code for the project (frontend and backend) will be delivered, for example in a Git repository. The code should be well-organized and commented where non-obvious. ShiFi’s team (or Replit AI) should be able to run and deploy the code from this repository.  
- **Configuration & Secrets:** Provide a secure way to handle configuration. Typically, environment variable files (for dev and a template for production) should be included. The actual secrets (API keys for Didit, Plaid, etc.) will be provided by ShiFi and inserted into the environment in production – ensure the code can read those from env variables. Document in a README which variables are needed (e.g. PLAID_CLIENT_ID, PLAID_SECRET, DIDIT_KEY, ROGER_API_KEY, etc.).  
- **Documentation:** Include a README or developer guide covering:  
  - Setup instructions (how to install dependencies, run the frontend and backend, run migrations if any, etc.).  
  - Environment setup (what keys to get from Plaid, Didit, etc., and where to put them).  
  - Any special deployment notes (if using services like AWS, mention needed config like S3 bucket names or webhooks that must be set).  
  - API documentation (could be inline via Swagger/OpenAPI or even a list of endpoints and their usage in the README). This helps anyone reviewing or extending the API.  
- **Testing Results:** Provide evidence of testing, e.g. sample user flow tested in the sandbox. Possibly include test accounts (like a dummy KYC identity that will always pass in sandbox, a Plaid sandbox bank like “First Platypus Bank” that simulates ACH, etc.) so ShiFi can demo the flow end-to-end.  
- **Deployment Scripts/Config:** If applicable, deliver Dockerfiles or cloud infrastructure config (though full DevOps might not be expected, at least instructions to deploy on a chosen platform).  
- **Maintainer Handoff:** Ensure that the ShiFi tech team (or the developer taking over) has everything needed to maintain the portal. This includes knowledge transfer on how to update the data room documents (maybe a script or manual steps documented), how to update template documents on Thanks Roger if needed, how to rotate API keys, etc.  

With these deliverables, ShiFi should be able to launch the investor portal and manage it going forward, giving investors a smooth digital experience and ShiFi a scalable way to onboard and manage investor relationships.

---

**End of Document** 

This PRD provides a comprehensive guide for developers to implement the ShiFi Investor Portal. By following the outlined requirements and flows, the resulting system will meet the needs of accredited investors and satisfy ShiFi’s operational and compliance objectives.