Code Improvement Suggestions
Overview
Based on our comprehensive analysis of the investor signup flow in the ShiFi Tester application, this document provides specific code improvement suggestions to address identified issues and enhance the overall quality, security, and user experience of the application.
Component Structure Improvements
1. Create Reusable Form Components
Current Issue:
Form components are duplicated across InvestorSignup, KYCVerification, and AccreditationVerification with similar patterns.
Suggested Implementation:
tsx
// /src/components/common/forms/FormField.tsx
import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Control } from "react-hook-form";

interface FormInputFieldProps {
  control: Control<any>;
  name: string;
  label: string;
  placeholder?: string;
  description?: string;
  type?: string;
  disabled?: boolean;
}

export function FormInputField({
  control,
  name,
  label,
  placeholder,
  description,
  type = "text",
  disabled = false,
}: FormInputFieldProps) {
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Input 
              placeholder={placeholder} 
              type={type} 
              disabled={disabled} 
              {...field} 
            />
          </FormControl>
          {description && <FormDescription>{description}</FormDescription>}
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
Usage Example:
tsx
// In InvestorSignup.tsx
<FormInputField
  control={form.control}
  name="email"
  label="Email Address"
  placeholder="your.email@example.com"
  type="email"
/>
2. Extract Document Upload Component
Current Issue:
Document upload functionality is duplicated across verification components.
Suggested Implementation:
tsx
// /src/components/common/uploads/DocumentUpload.tsx
import { useState } from "react";
import { UploadDropzone } from "@/components/ui/upload/upload-dropzone";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";

interface DocumentUploadProps {
  title: string;
  description: string;
  documentType: string;
  maxFiles?: number;
  acceptedFileTypes?: string;
  onUpload: (files: File[], documentType: string) => Promise<void>;
}

export function DocumentUpload({
  title,
  description,
  documentType,
  maxFiles = 5,
  acceptedFileTypes = ".pdf,.jpg,.jpeg,.png",
  onUpload,
}: DocumentUploadProps) {
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);

  const handleUpload = async (files: File[]) => {
    if (files.length === 0) return;
    
    setUploading(true);
    setUploadProgress(0);
    setError(null);
    
    // Simulate upload progress
    const progressInterval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return prev;
        }
        return prev + 10;
      });
    }, 300);
    
    try {
      await onUpload(files, documentType);
      setUploadProgress(100);
      
      setTimeout(() => {
        setUploading(false);
        setUploadProgress(0);
      }, 500);
    } catch (error) {
      setError("File upload failed. Please try again.");
      setUploadProgress(0);
      setUploading(false);
      clearInterval(progressInterval);
    }
  };

  return (
    <div className="space-y-4">
      <h4 className="text-md font-medium">{title}</h4>
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <UploadDropzone
        multiple={maxFiles > 1}
        maxFiles={maxFiles}
        onUpload={handleUpload}
        uploading={uploading}
        progress={uploadProgress}
        description={description}
        acceptedFileTypes={acceptedFileTypes}
      />
    </div>
  );
}
API Integration Improvements
3. Create API Client with Standardized Handling
Current Issue:
API request handling varies across components with inconsistent error handling.
Suggested Implementation:
tsx
// /src/lib/api/apiClient.ts
import { fetchCsrfToken } from "@/lib/csrf";

export type ApiResponse<T> = {
  data: T | null;
  error: string | null;
  status: number;
};

export class ApiClient {
  private static instance: ApiClient;
  private baseUrl: string = "";

  private constructor() {}

  public static getInstance(): ApiClient {
    if (!ApiClient.instance) {
      ApiClient.instance = new ApiClient();
    }
    return ApiClient.instance;
  }

  public setBaseUrl(url: string): void {
    this.baseUrl = url;
  }

  private async request<T>(
    method: string,
    endpoint: string,
    data?: any,
    requiresCsrf: boolean = true
  ): Promise<ApiResponse<T>> {
    try {
      // Get CSRF token for state-changing requests
      if (requiresCsrf && (method === "POST" || method === "PUT" || method === "DELETE")) {
        await fetchCsrfToken();
      }

      const url = `${this.baseUrl}${endpoint}`;
      const options: RequestInit = {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
      };

      if (data && (method === "POST" || method === "PUT")) {
        options.body = JSON.stringify(data);
      }

      const response = await fetch(url, options);
      const responseData = await response.json();

      if (!response.ok) {
        return {
          data: null,
          error: responseData.message || "An error occurred",
          status: response.status,
        };
      }

      return {
        data: responseData,
        error: null,
        status: response.status,
      };
    } catch (error) {
      return {
        data: null,
        error: error instanceof Error ? error.message : "Network error",
        status: 0,
      };
    }
  }

  public async get<T>(endpoint: string, requiresCsrf: boolean = false): Promise<ApiResponse<T>> {
    return this.request<T>("GET", endpoint, undefined, requiresCsrf);
  }

  public async post<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {
    return this.request<T>("POST", endpoint, data);
  }

  public async put<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {
    return this.request<T>("PUT", endpoint, data);
  }

  public async delete<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>("DELETE", endpoint);
  }
}

export const apiClient = ApiClient.getInstance();
4. Create Custom Hooks for API Operations
Current Issue:
Similar API request patterns are repeated across components.
Suggested Implementation:
tsx
// /src/hooks/api/useInvestorProfile.ts
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiClient } from "@/lib/api/apiClient";

export interface InvestorProfile {
  id: number;
  userId: number;
  accreditationStatus: boolean | null;
  verificationStatus: string;
  kycCompleted: boolean;
  // Add other profile fields
}

export function useInvestorProfile() {
  const queryClient = useQueryClient();

  const profileQuery = useQuery({
    queryKey: ["investorProfile"],
    queryFn: async () => {
      const response = await apiClient.get<{ profile: InvestorProfile }>("/api/investor/profile");
      if (response.error) {
        throw new Error(response.error);
      }
      return response.data?.profile;
    },
  });

  const updateProfile = useMutation({
    mutationFn: async (profileData: Partial<InvestorProfile>) => {
      const response = await apiClient.post<{ success: boolean }>("/api/investor/profile", profileData);
      if (response.error) {
        throw new Error(response.error);
      }
      return response.data;
    },
    onSuccess: () => {
      // Invalidate profile query to refresh data
      queryClient.invalidateQueries({ queryKey: ["investorProfile"] });
    },
  });

  return {
    profile: profileQuery.data,
    isLoading: profileQuery.isLoading,
    error: profileQuery.error,
    updateProfile: updateProfile.mutate,
    isUpdating: updateProfile.isPending,
  };
}
State Management Improvements
5. Create Verification Context Provider
Current Issue:
Verification state is managed independently in different components.
Suggested Implementation:
tsx
// /src/context/VerificationContext.tsx
import { createContext, useContext, ReactNode, useState, useEffect } from "react";
import { apiClient } from "@/lib/api/apiClient";

type VerificationStatus = "not_started" | "pending" | "verified" | "rejected";

interface VerificationState {
  kycStatus: VerificationStatus;
  accreditationStatus: VerificationStatus;
  bankConnected: boolean;
  isVerified: boolean;
}

interface VerificationContextType {
  verificationState: VerificationState;
  refreshVerificationStatus: () => Promise<void>;
  isLoading: boolean;
  error: Error | null;
}

const VerificationContext = createContext<VerificationContextType | null>(null);

export function VerificationProvider({ children }: { children: ReactNode }) {
  const [verificationState, setVerificationState] = useState<VerificationState>({
    kycStatus: "not_started",
    accreditationStatus: "not_started",
    bankConnected: false,
    isVerified: false,
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  const refreshVerificationStatus = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await apiClient.get<{ profile: any }>("/api/investor/profile");
      
      if (response.error) {
        throw new Error(response.error);
      }
      
      const profile = response.data?.profile;
      
      if (profile) {
        setVerificationState({
          kycStatus: profile.kycStatus || "not_started",
          accreditationStatus: profile.accreditationStatus ? "verified" : "not_started",
          bankConnected: !!profile.plaidItemId,
          isVerified: profile.verificationStatus === "verified",
        });
      }
    } catch (err) {
      setError(err instanceof Error ? err : new Error("Failed to fetch verification status"));
    } finally {
      setIsLoading(false);
    }
  };

  // Load verification status on mount
  useEffect(() => {
    refreshVerificationStatus();
  }, []);

  return (
    <VerificationContext.Provider
      value={{
        verificationState,
        refreshVerificationStatus,
        isLoading,
        error,
      }}
    >
      {children}
    </VerificationContext.Provider>
  );
}

export function useVerification() {
  const context = useContext(VerificationContext);
  
  if (!context) {
    throw new Error("useVerification must be used within a VerificationProvider");
  }
  
  return context;
}
Security Improvements
6. Replace localStorage with Secure Cookie Approach
Current Issue:
User data stored in localStorage is vulnerable to XSS attacks.
Suggested Implementation:
tsx
// /src/lib/auth.ts (modified)
import { apiClient } from "@/lib/api/apiClient";
import { User } from "@shared/schema";

export type AuthUser = Omit<User, "password"> & {
  merchantId?: number;
};

export interface AuthResult {
  user: AuthUser;
}

export interface RegisterParams {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  role: string;
}

export async function registerUser(params: RegisterParams): Promise<void> {
  const response = await apiClient.post<void>("/api/auth/register", params);
  if (response.error) {
    throw new Error(response.error);
  }
}

export async function loginUser(email: string, password: string, userType?: string): Promise<AuthResult> {
  const response = await apiClient.post<AuthResult>("/api/auth/login", {
    email,
    password,
    ...(userType ? { userType } : {}),
  });
  
  if (response.error || !response.data?.user) {
    throw new Error(response.error || "Invalid response from server");
  }
  
  return response.data;
}

export async function getCurrentUser(): Promise<AuthUser | null> {
  try {
    // Instead of checking localStorage, make an API call to validate session
    const response = await apiClient.get<{ user: AuthUser }>("/api/auth/me");
    
    if (response.error || !response.data?.user) {
      return null;
    }
    
    return response.data.user;
  } catch (error) {
    console.error("Failed to get current user:", error);
    return null;
  }
}

// These functions are no longer needed as we're not using localStorage
// export function storeUserData(user: AuthUser): void {
//   localStorage.setItem("shifi_user", JSON.stringify(user));
// }

// export function clearUserData(): void {
//   localStorage.removeItem("shifi_user");
// }

export function getUserHomeRoute(user: AuthUser): string {
  switch (user.role) {
    case "admin":
      return "/admin/dashboard";
    case "merchant":
      return "/merchant/dashboard";
    case "investor":
      return "/investor/dashboard";
    case "customer":
      return "/customer/dashboard";
    default:
      return "/";
  }
}
Performance Improvements
7. Implement Code Splitting for Routes
Current Issue:
Large component files impact initial load time with no code splitting.
Suggested Implementation:
tsx
// /src/App.tsx (modified)
import { Suspense, lazy } from "react";
import { Route, Switch } from "wouter";
import { AuthProvider } from "@/context/AuthContext";
import { Toaster } from "@/components/ui/toaster";
import { LoadingSpinner } from "@/components/ui/loading-spinner";

// Lazy load routes
const Home = lazy(() => import("@/pages/Home"));
const Login = lazy(() => import("@/pages/Login"));
const Register = lazy(() => import("@/pages/Register"));

// Lazy load investor routes
const InvestorSignup = lazy(() => import("@/pages/investor/InvestorSignup"));
const InvestorDashboard = lazy(() => import("@/pages/investor/Dashboard"));
const KYCVerification = lazy(() => import("@/pages/investor/KYCVerification"));
const AccreditationVerification = lazy(() => import("@/pages/investor/AccreditationVerification"));
const InvestorProfile = lazy(() => import("@/pages/investor/Profile"));
const InvestorOfferings = lazy(() => import("@/pages/investor/Offerings"));

// Loading fallback
const LoadingFallback = () => (
  <div className="flex h-screen w-full items-center justify-center">
    <LoadingSpinner size="lg" />
  </div>
);

function App() {
  return (
    <AuthProvider>
      <Suspense fallback={<LoadingFallback />}>
        <Switch>
          <Route path="/" component={Home} />
          <Route path="/login" component={Login} />
          <Route path="/register" component={Register} />
          
          {/* Investor routes */}
          <Route path="/investor/signup" component={InvestorSignup} />
          <Route path="/investor/dashboard" component={InvestorDashboard} />
          <Route path="/investor/verify/kyc/:status?" component={KYCVerification} />
          <Route path="/investor/verify/accreditation" component={AccreditationVerification} />
          <Route path="/investor/profile" component={InvestorProfile} />
          <Route path="/investor/offerings" component={InvestorOfferings} />
          <Route path="/investor/offerings/:id">
            {(params) => {
              const OfferingDetail = lazy(() => import("@/pages/investor/OfferingDetail"));
              return (
                <Suspense fallback={<LoadingFallback />}>
                  <OfferingDetail id={params.id} />
                </Suspense>
              );
            }}
     
(Content truncated due to size limit. Use line ranges to read in chunks)